import { FluentMap } from '@berun/fluent';
import { PluginPreset } from './PluginPreset';
export declare class Babel extends FluentMap<Babel> {
    babelrc: (value: boolean) => this;
    root: (value: string) => this;
    ast: (value: any) => this;
    auxiliaryCommentAfter: (value: any) => this;
    auxiliaryCommentBefore: (value: any) => this;
    babelrcRoots: (value: any) => this;
    code: (value: any) => this;
    comments: (value: any) => this;
    compact: (value: any) => this;
    configFile: (value: any) => this;
    cwd: (value: any) => this;
    envName: (value: any) => this;
    extends: (value: any) => this;
    filename: (value: any) => this;
    filenameRelative: (value: any) => this;
    getModuleId: (value: any) => this;
    highlightCode: (value: any) => this;
    ignore: (value: any) => this;
    inputSourceMap: (value: any) => this;
    minified: (value: any) => this;
    moduleId: (value: any) => this;
    moduleIds: (value: any) => this;
    moduleRoot: (value: any) => this;
    only: (value: any) => this;
    retainLines: (value: any) => this;
    shouldPrintComment: (value: any) => this;
    sourceFileName: (value: any) => this;
    sourceMaps: (value: any) => this;
    sourceRoot: (value: any) => this;
    sourceType: (value: any) => this;
    wrapPluginVisitorMethod: (value: any) => this;
    plugins: FluentMap<this>;
    presets: FluentMap<this>;
    environments: FluentMap<this>;
    constructor(parent?: Babel, name?: any);
    env(name: string): Babel;
    plugin(name: string, opts?: any): PluginPreset<this>;
    preset(name: string, opts?: any): PluginPreset<this>;
    toConfig(omit?: string[]): {};
    merge(obj: any, omit?: any[]): this;
}
