import { FluentMap } from '@berun/fluent';
declare type sourceMap = {
    vendor?: boolean;
    inlineCSSPath?: string;
    inline?: boolean;
    project?: boolean;
    sourceRoot?: string;
};
declare type LogMap = {
    enabled?: boolean;
    showBundledFiles?: boolean;
    clearTerminalOnBundle?: boolean;
};
export declare class FuseBox<PARENT> extends FluentMap<PARENT> {
    homeDir: (value: string) => this;
    modulesFolder: (value: string | string[]) => this;
    tsConfig: (value: string) => this;
    package: (value: string | {
        name: string;
        main: string;
    }) => this;
    dynamicImportsEnabled: (value: boolean) => this;
    cache: (value: boolean) => this;
    target: (value: string) => this;
    log: (value: boolean | LogMap) => this;
    showBundledFiles: (value: boolean) => this;
    clearTerminalOnBundle: (value: boolean) => this;
    globals: (value: {
        [packageName: string]: string;
    }) => this;
    autoImport: (value: any) => this;
    natives: (value: any) => this;
    warnings: (value: boolean) => this;
    shim: (value: any) => this;
    writeBundles: (value: boolean) => this;
    useTypescriptCompiler: (value: boolean) => this;
    standalone: (value: boolean) => this;
    sourceMaps: (value: boolean | sourceMap) => this;
    inlineCSSPath: (value: string) => this;
    inline: (value: boolean) => this;
    project: (value: boolean) => this;
    sourceRoot: (value: string) => this;
    hash: (value: string | boolean) => this;
    ignoreModules: (value: string[]) => this;
    customAPIFile: (value: string) => this;
    output: (value: string) => this;
    emitHMRDependencies: (value: boolean) => this;
    filterFile: (value: (file: File) => boolean) => this;
    automaticAlias: (value: boolean) => this;
    allowSyntheticDefaultImports: (value: boolean) => this;
    debug: (value: boolean) => this;
    files: (value: any) => this;
    useJsNext: (value: boolean | string[]) => this;
    stdin: (value: boolean) => this;
    ensureTsConfig: (value: boolean) => this;
    runAllMatchedPlugins: (value: boolean) => this;
    showErrors: (value: boolean) => this;
    showErrorsInBrowser: (value: boolean) => this;
    polyfillNonStandardDefaultUsage: (value: boolean | string[]) => this;
    transformers: (value: any) => this;
    extensionOverrides: (value: string[]) => this;
    serverBundle: (value: boolean) => this;
    plugins: FluentMap<this>;
    bundles: FluentMap<this>;
    alias: FluentMap<this>;
    constructor(parent?: PARENT, name?: string);
    plugin(name: any): any;
    pluginset(name: any): any;
    bundle(name: any): any;
    toConfig(omit?: string[]): {};
    toBundles(omit?: string[]): {};
    merge(obj: any, omit?: any[]): this;
}
export {};
